{"version":3,"sources":["components/utils/EmployeeTable.js","components/Navbar.js","components/utils/useFetch.js","components/pages/Home.js","components/pages/About.js","components/pages/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeTable","props","useState","employees","results","setEmployees","filteredEmployees","setFilteredEmployees","searchName","setSerachName","sortedField","setSortedField","sortDirection","setSortDirection","name","country","email","classBtnVal","setClassBtnval","useEffect","filter","employee","last","toLowerCase","includes","first","sortedEmployees","console","log","sort","a","b","p","q","eval","className","type","placeholder","onChange","e","target","value","data-pagecount","onClick","map","src","picture","thumbnail","alt","title","location","login","uuid","Navbar","to","useFetch","url","data","setData","isError","setIsError","isPending","setIsPending","abortFetch","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","message","abort","Home","NotFound","App","exact","path","About","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ef1cdf5.chunk.js","sourcesContent":["import React, { useState,useEffect } from \"react\";\n\nconst EmployeeTable = (props) => {    \n    \n    //const employees = props.employees.results;\n    const [employees, setEmployees] = useState(props.employees.results);\n    const [filteredEmployees, setFilteredEmployees] =  useState([])\n    const [searchName, setSerachName] = useState('');\n    const [sortedField, setSortedField] = useState(null);\n    const [sortDirection, setSortDirection] = useState();\n    const [classBtnVal,setClassBtnval ] = useState({name: 'none', country: 'none', email: 'none'})\n\n\n    // const filteredEmployees = employees.filter ( employee => {\n    //     return employee.name.last.toLowerCase().includes(searchName.toLowerCase()) ||  employee.name.first.toLowerCase().includes(searchName.toLowerCase())\n        \n    //   })\n    useEffect(() => {\n       setFilteredEmployees (\n            employees.filter ( employee => {\n                return employee.name.last.toLowerCase().includes(searchName.toLowerCase()) ||  employee.name.first.toLowerCase().includes(searchName.toLowerCase());\n            }))\n    }, [searchName, employees])\n\n    let sortedEmployees=[...filteredEmployees]\n\n    if (sortedField !== null) {\n        console.log(classBtnVal);\n    sortedEmployees.sort((a, b) => {\n        // because our data is hirearchical need to adjuse field eval\n        let p = `a.${sortedField} < b.${sortedField}`;\n        let q = `a.${sortedField} > b.${sortedField}`;\n         if (eval(p) ) {\n          // if(a[sortedField] < b[sortedField] ) { \n            return sortDirection === 'ascending' ? -1: 1;\n        }\n         if (eval(q) ) {\n        //if (a[sortedField] > b[sortedField] ) {\n            return sortDirection === 'ascending' ? 1: -1;\n        }\n        return 0;\n      });\n    }\n    \n\n        return (\n        <div className=\"container\">\n            <span>Filter by Name: </span> \n             <input type=\"text\" placeholder=\"Enter Filter Criteria\" onChange={ e => setSerachName(e.target.value)} />\n            \n              <table className='employee-table pagination' data-pagecount=\"4\">\n                  <thead>\n                  <tr>     \n                      <th></th>\n                      <th>\n                        <button type=\"button\" onClick={() => {\n                            setSortedField ('name.last');\n                            sortDirection === 'ascending' ? setSortDirection('descending'): setSortDirection('ascending');\n                             setClassBtnval({name: sortDirection, country: 'none', email: 'none'})\n                             }}\n                            className={classBtnVal.name}>\n                         Name\n                         </button>\n                      </th>\n                      <th><button type=\"button\" onClick={() => {\n                          setSortedField ('location.country')\n                          sortDirection === 'ascending' ? setSortDirection('descending'): setSortDirection('ascending') \n                          setClassBtnval({name: 'none', country: sortDirection, email: 'none'})\n                          }}\n                          className={ classBtnVal.country}>\n                         Country\n                         </button>\n                     </th>\n                      <th><button type=\"button\" onClick={() => {\n                          setSortedField ('email');\n                          sortDirection === 'ascending' ? setSortDirection('descending'): setSortDirection('ascending')\n                          setClassBtnval({name: 'none', country: 'none', email: sortDirection})\n                          }}\n                          className={classBtnVal.email}>\n                         Email\n                         </button>\n                     </th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                      {\n                          sortedEmployees.map((employee) => (    \n                            <tr className='table-row' key={employee.login.uuid}>\n                                <td>\n                                    <img src={employee.picture.thumbnail} alt=\"random thumbnail of person\"/>\n                                </td>\n                                <td>{employee.name.title} {employee.name.first} {employee.name.last}</td>\n                                <td>{employee.location.country}</td>\n                                <td>{employee.email}</td>\n                                \n                            </tr>\n                        ))\n                      }\n                  </tbody>\n              </table>\n          </div>\n \n      );\n  }\n  \n      \n   \n \nexport default EmployeeTable;\n\n","import { Link } from 'react-router-dom';\n\nconst Navbar = (props) => {\n    return (\n        <nav className=\"navbar\">\n            <h1>The Employee Directory</h1>\n            <div className = 'links' >\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/about\" >About</Link>\n            </div>\n        </nav>\n      );\n}\n \nexport default Navbar;","//This custom fetch hook was developed while following the NetNinja tutorial and made sense to keep it\n// the helper function goes and does the fetch of a url - returns data, isPending if waiting and isError \n// if there is a problem with the fetch - i\n\nimport{ useState, useEffect } from 'react';\n\nconst useFetch = (url)  => {\n\n    const [data, setData] = useState(null);\n    const [isError, setIsError] = useState(null)\n    const [isPending, setIsPending] = useState(true);\n\n\n    useEffect(() => {\n        const abortFetch = new AbortController();\n            fetch(url, {signal: abortFetch.signal})\n                .then(res => {\n                    if(!res.ok){\n                     throw Error(\"Did not get valid for that resource\")\n                    }\n                return res.json()\n                })\n                .then ((data) => {\n                setData(data);\n                setIsPending(false);\n                setIsError(null);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                    if(err.name === 'AbortError'){\n                        console.log('Fetch Aborted')\n                    } else {    \n                    setIsError(err.message);\n                    setIsPending(false);\n                    }\n\n                })\n        \n\n        return () => abortFetch.abort();\n    },[url]) \n\n    return {data, isPending, isError}\n}\n\nexport default useFetch;","import useFetch from '../utils/useFetch'\nimport EmployeeTable from '../utils/EmployeeTable'\n\n\nconst Home = () => {\n    // this uses a custom hook \n    const {data, isPending, isError} = useFetch('https://randomuser.me/api/?results=200');   \n    return (  \n        <div className='home'>\n        {isError && <div>Scotty we have a problem {isError}</div> }\n        {isPending && <div>Data is Loading ...</div> }\n        {data && <EmployeeTable employees={data} title={\"List of Employees\"}/>}\n        </div> \n    );\n    \n}\n \nexport default Home;\n\n","import { Link } from \"react-router-dom\"\n\nconst NotFound = () => {\n    return ( \n        <div className=\"About\">\n                <h5>The Employee Directory application is a front end react \n                    application that creates a list of users from an opesoruce API that represents employees </h5>   \n                <h5>The user can search and filter the users by name.</h5>\n            <Link to=\"/\">Back to the home page</Link>               \n        </div>\n     );\n}\n \nexport default NotFound;","import { Link } from \"react-router-dom\"\n\nconst NotFound = () => {\n    return ( \n        <div className=\"notfound\">\n            <h2>Sorry</h2>\n            <p>That page cannot be located.</p>\n            <Link to=\"/\">Back to the home page</Link>               \n        </div>\n     );\n}\n \nexport default NotFound;","import Navbar from './components/Navbar.js'\nimport Home from './components/pages/Home.js'\nimport About from './components/pages/About.js'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport NotFound from './components/pages/NotFound.js'\n\n\nfunction App() {\n\n  return (  \n    <Router>\n    <div className=\"App\">\n      <Navbar />\n     </div>\n      <div className=\"content\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route> \n          <Route exact path=\"/About\">\n            <About />\n          </Route>                \n            <Route path=\"*\">\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}